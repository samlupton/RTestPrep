getwd()
ddt <- read.csv("file.choose()")
ddt <- read.csv(file.choose())
ddt <- read.csv(file.choose())
ddt[1, 2]
ddt
ddt[SPECIES = "LMBASS" & LENGTH > 30]
with(ddt[[SPECIES] = "LMBASS" & LENGTH > 30,]
with(ddt[[SPECIES] == "LMBASS" & LENGTH > 30,]
ddt %>% filter(SPECIES = "LMBASS" & LENGTH > 30)
ddt %>% filter(SPECIES = "LMBASS" & LENGTH > 30,)
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30,)
getwd()
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30,)
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30)
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30)
install.packages("dplyr")
getwd()
ddt <- read.csv(file.choose())
library(dplyr)
ddt[1, 2]
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30)
# Problem 3
# How many fish have a length > 49 and < 50? Hint: Use an "&"
ddt %>% filter(LENGTH > 49 & LENTH < 50)
# Problem 3
# How many fish have a length > 49 and < 50? Hint: Use an "&"
ddt %>% filter(LENGTH > 49 & LENGTH < 50)
# Problem 4
# How many fish have a length > 49 and weight < 1200?
ddt %>% filter(LENGTH > 49 & WEIGHT < 1200)
install.packages("plotrix")
install.packages("DescTools")
addmargins(tab)
pnorm ?
pnorm(mean=20, sd=6)
pnorm(q=20, mean=20, sd=6)
pnorm(q=5, mean=10, sd=10, lower.tail = TRUE)
pnorm(q=0.5, mean=0, sd=1, lower.tail = TRUE)
pnorm(q=0.5, mean=0, sd=1, lower.tail = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = TRUE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = TRUE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=20, strata = REG)
str
str <- sampler::ssamp(df = swiss1, n=18, strata = REG)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = TRUE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
# swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
swiss1$REG <- rep(c("Region A", "Region B", "Region C"), length.out = nrow(swiss1))
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
# swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
swiss1$REG <- rep(c("Region A", "Region B", "Region C"), length.out = nrow(swiss1))
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
# swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
swiss1$REG <- rep(c("Region A", "Region B", "Region C"), length.out = nrow(swiss1))
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
# swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
swiss1$REG <- rep(c("Region A", "Region B", "Region C"), length.out = nrow(swiss1))
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=30, strata = REG)
str
setwd("~/Repos/fall-2024-coursework/math-4753/Random")
ddt <- read.csv(file.choose())
head(ddt)
bass <- ddt[SPECIES == "LMBASS" & LENGTH > 30]
bass <- ddt[SPECIES == 'LMBASS' & LENGTH > 30]
bass <- ddt[ddt$SPECIES == "LMBASS" & LENGTH > 30]
bass <- ddt[ddt$SPECIES == "LMBASS" & ddt$LENGTH > 30]
bass <- ddt[ddt$SPECIES == "LMBASS" & ddt$LENGTH > 30,]
bass
len <- ddt[ddt$LENGTH > 49 & ddt$LENGTH < 50,]
len
lw <- ddt[ddt$LENGTH > 49 & ddt$WEIGHT < 1200,]
LW
lw
ddt <- read.csv(file)
ddt <- read.csv(file.choose())
head(ddt)
z_weight <- scale(ddt$WEIGHT)
z_weight
out <- ddt[abs(z_weight) > 3,]
out
smallest <- min(out)
ddt <- read.csv(file.choose())
setwd("~/Repos/fall-2024-coursework/math-4753/Random")
ddt <- read.csv(file.choose())
ddt <- read.csv(file.choose())
z_weight <- scale(ddt$WEIGHT)
z_weight
outliers <- ddt[abs(z_weight) > 3,]
outliers
ddt <- read.csv(file.choose())
z_weight <- scale(ddt$WEIGHT)
z_weight
outliers <- ddt[abs(z_weight) > 3,]
outliers
ddt <- read.csv(file.choose())
# Set
z_weight <- scale(ddt$WEIGHT)
z_weight
outliers <- ddt[abs(z_weight) > 3,]
outliers
outliers <- ddt[abs(z_weight) > 2 & abs(z_weight) < 3]
outliers
outliers <- ddt[abs(z_weight) > 2 & abs(z_weight) < 3]
outliers
min(outliers)
outliers
ddt <- read.csv(file.choose())
# Set
z_weight <- scale(ddt$WEIGHT)
z_weight
outliers <- ddt[abs(z_weight) > 3,]
outliers
ddt <- read.csv(file.choose())
# Question 2
q_2 <- scale(ddt$WEIGHT)
q_2
outliers <- ddt[abs(q_2) > 3,]
outliers
# Question 3
q_3 <- ddt[abs(z_weight) > 2 & abs(z_weight) < 3, ]
q_3_answer <- min(q_3$WEIGHT)
min_weight_outliers <- min(outliers$WEIGHT)
ddt <- read.csv(file.choose())
# Question 2
z_weight <- scale(ddt$WEIGHT)
z_weight
outliers <- ddt[abs(q_2) > 3,]
outliers
# Question 3
outliers <- ddt[abs(z_weight) > 2 & abs(z_weight) < 3, ]
min_weight_outliers <- min(outliers$WEIGHT)
min_weight_outliers
ddt <- read.csv(file.choose())
# Question 2
z_weight <- scale(ddt$WEIGHT)
z_weight
outliers <- ddt[abs(q_2) > 3,]
outliers
# Question 3
outliers <- ddt[abs(z_weight) > 2 & abs(z_weight) < 3, ]
min_weight_outliers <- min(outliers$WEIGHT)
min_weight_outliers
ddt <- read.csv(file.choose())
# Question 2
z_weight <- scale(ddt$WEIGHT)
z_weight
outliers <- ddt[abs(q_2) > 3,]
outliers
# Question 3
outliers <- ddt[abs(z_weight) > 2 & abs(z_weight) < 3, ]
min_weight_outliers <- min(outliers$WEIGHT)
min_weight_outliers
ddt <- read.csv(file.choose())
# Question 2
z_weight <- scale(ddt$WEIGHT)
z_weight
outliers <- ddt[abs(z_weight) > 3,]
outliers
# Question 3
outliers <- ddt[abs(z_weight) > 2 & abs(z_weight) < 3, ]
min_weight_outliers <- min(outliers$WEIGHT)
min_weight_outliers
ddt <- read.csv(file.choose())
ddt
# Question 1
mean_weight <- mean(ddt[$SPECIES == 'SMBUFFALO',]$WEIGHT)
ddt <- read.csv(file.choose())
ddt
# Question 1
mean_weight <- mean(ddt[ddt$SPECIES == 'SMBUFFALO',]$WEIGHT)
mean_weight
# Question 2
mean_length <- mean(ddt[ddt$DDT > 33,]$LENGTH)
mean_length
# Question 2
mean_length <- mean(ddt[ddt$DDT > 33 & ddt$SPECIES == 'CCATFISH',]$LENGTH)
mean_length
# Question 3
std <- sd(ddt[ddt$SPECIES == 'LMBASS' | ddt$SPECIES == 'SMUFFALO',]$DDT)
std
# Question 3
std <- sd(ddt[ddt$SPECIES == 'LMBASS' | ddt$SPECIES == 'SMBUFFALO',]$DDT)
std
# Question 4
num <- count(ddt[ddt$LENGTH > 40 & ddt$WEIGHT > 1000,])
# Question 4
num <- sum(ddt[ddt$LENGTH > 40 & ddt$WEIGHT > 1000,])
num
# Question 4
num <- nrow(ddt[ddt$LENGTH > 40 & ddt$WEIGHT > 1000,])
num
# Question 1
ddt[1, 2]
# Question 2
num_bass <- nrow(ddt[ddt$LENGTH > 30,])
# Question 2
num_bass <- nrow(ddt[ddt$LENGTH > 30,])
num_bass
# Question 2
num_bass <- nrow(ddt[ddt$LENGTH > 30 & SPECIES == 'LMBASS',])
num_bass
# Question 2
num_bass <- nrow(ddt[ddt$LENGTH > 30 & ddt$SPECIES == 'LMBASS',])
num_bass
# Question 3
num_fish <- nrow(ddt[ddt$LENGTH > 49 & ddt$LENGTH < 50,])
num_fish
# Question 4
num_fish <- nrow(ddt[ddt$LENGTH > 49 & ddt$WEIGHT < 1200,])
num_fish
ddt <- read.csv("DDT.csv")
# Question 2
z_weight <- scale(ddt$WEIGHT)
z_weight
outliers <- ddt[abs(z_weight) > 3,]
outliers
tab <- with(mtbe, table(wellclass, 'MTBE-Detect))
addmargins(tab)
tab <- with(mtbe, table(WellClass, 'MTBE-Detect'))
tab <- with(mtbe, table(WellClass, 'MTBE-Detect'))
addmargins(tab)
tab <- with(mtbe, table(WellClass, 'MTBE-Detect'))
addmargins(tab)
addmargins(tab)
data <- read.csv("MTBE.csv")
tab <- with(data, table(WellClass, `MTBE.Detect`))
addmargins(tab)
data <- read.csv("MTBE.csv")
tab <- with(data, table(WellClass, 'MTBE.Detect'))
addmargins(tab)
data <- read.csv("MTBE.csv")
tab <- with(data, table(WellClass, 'MTBE.Detect'))
addmargins(tab)
data <- read.csv("MTBE.csv")
tab <- with(data, table(WellClass, `MTBE.Detect`))
addmargins(tab)
seeds <- read.csv("SEEDLING.csv")
tt <- table(seeds$Abundance, seeds$Type)
att <- addmargins(tt)
att
# Question 1
p_y_equals_6 <- dbinom(6, size = 10, prob = 0.6)
p_y_equals_6
# Question 1
mu <- 20
sigma <- 6
p_value <- 1 - pnorm(20, mean = mu, sd = sigma)
p_value
# Question 1
qnorm(10, 4, 0.6)
# Question 1
qnorm(mean = 10, sd = 4, y = 0.6)
# Question 1
qnorm(0.6, mean = 10, sd = 4)
# Question 2
pnorm(10, mean = 20, sd = 10)
# Question 3
qnorm(0.55, mean = -8, sd = 5)
# Question 4
pnorm(1000, mean = 10000, sd = 5)
