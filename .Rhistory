getwd()
ddt <- read.csv("file.choose()")
ddt <- read.csv(file.choose())
ddt <- read.csv(file.choose())
ddt[1, 2]
ddt
ddt[SPECIES = "LMBASS" & LENGTH > 30]
with(ddt[[SPECIES] = "LMBASS" & LENGTH > 30,]
with(ddt[[SPECIES] == "LMBASS" & LENGTH > 30,]
ddt %>% filter(SPECIES = "LMBASS" & LENGTH > 30)
ddt %>% filter(SPECIES = "LMBASS" & LENGTH > 30,)
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30,)
getwd()
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30,)
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30)
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30)
install.packages("dplyr")
getwd()
ddt <- read.csv(file.choose())
library(dplyr)
ddt[1, 2]
ddt %>% filter(SPECIES == "LMBASS" & LENGTH > 30)
# Problem 3
# How many fish have a length > 49 and < 50? Hint: Use an "&"
ddt %>% filter(LENGTH > 49 & LENTH < 50)
# Problem 3
# How many fish have a length > 49 and < 50? Hint: Use an "&"
ddt %>% filter(LENGTH > 49 & LENGTH < 50)
# Problem 4
# How many fish have a length > 49 and weight < 1200?
ddt %>% filter(LENGTH > 49 & WEIGHT < 1200)
install.packages("plotrix")
install.packages("DescTools")
addmargins(tab)
pnorm ?
pnorm(mean=20, sd=6)
pnorm(q=20, mean=20, sd=6)
pnorm(q=5, mean=10, sd=10, lower.tail = TRUE)
pnorm(q=0.5, mean=0, sd=1, lower.tail = TRUE)
pnorm(q=0.5, mean=0, sd=1, lower.tail = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = TRUE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = TRUE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=20, strata = REG)
str
str <- sampler::ssamp(df = swiss1, n=18, strata = REG)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = TRUE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
# swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
swiss1$REG <- rep(c("Region A", "Region B", "Region C"), length.out = nrow(swiss1))
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
# swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
swiss1$REG <- rep(c("Region A", "Region B", "Region C"), length.out = nrow(swiss1))
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
# swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
swiss1$REG <- rep(c("Region A", "Region B", "Region C"), length.out = nrow(swiss1))
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=9, strata = REG)
str
# Load the original swiss dataset
data(swiss)
# Create a copy called swiss1
swiss1 <- swiss
# Add a new column "REG" for stratification (randomly assigning regions)
set.seed(123)  # For reproducibility
# swiss1$REG <- sample(c("Region A", "Region B", "Region C"), size = nrow(swiss1), replace = FALSE)
swiss1$REG <- rep(c("Region A", "Region B", "Region C"), length.out = nrow(swiss1))
# View the first few rows of swiss1 to confirm
head(swiss1)
str <- sampler::ssamp(df = swiss1, n=30, strata = REG)
str
setwd("~/MATH-4753-Study/RTestPrep")
ddt <- read.csv(file.choose())
filter <- subset(ddt, SPECIES == "LMBASS" | SPECIES == "SMBUFFALO")
STD_DEV <- SD(filter)
STD_DEV <- sd(filter)
sth_dev <- sd(filter)
ddt <- read.csv(file.choose())
sm_buffalo <- subset(ddt, SPECIES == "SMBUFFALO")
mean_weight <- mean(sm_buffalo$WEIGHT)
